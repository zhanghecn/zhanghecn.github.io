(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{427:function(t,a,s){"use strict";s.r(a);var n=s(62),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"高级函数过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级函数过程"}},[t._v("#")]),t._v(" 高级函数过程")]),t._v(" "),s("h2",{attrs:{id:"堆栈传参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆栈传参"}},[t._v("#")]),t._v(" 堆栈传参")]),t._v(" "),s("p",[t._v("之前参数是寄存器上面,到由于用寄存器的太占位置，且容易更改到寄存器的值，所以后面\n建议使用堆栈传参")]),t._v(" "),s("p",[t._v("一般来说ebp 是堆栈参数的基址  而esp则是堆栈的基址")]),t._v(" "),s("ol",[s("li",[t._v("参数\n对于传参将指向rsp 栈基址 的上方 ,一下示例传参了\na和b 并且求和")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("addTwo proc\nmov dword ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rsp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ecx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmov dword ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rsp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("edx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v("位堆栈距离"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("字节 \npush rbp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nmov rbp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rsp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\nmovzx rax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("word ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rbp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" push rbp后还得"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\nmovzx rbx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("word ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rbp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" push rbp后还得"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\nadd rax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rbx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npop rbp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\naddTwo endp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("img",{attrs:{src:t.$withBase("/img_11.png"),alt:"foo"}}),t._v("\n对于堆栈地址 越往上地址越大 切64位地址 需要+8个字节的地址符号\n2. 局部变量\n一般来说局部变量是存在栈空间的 也就是基于esp栈空间下的\n```c \nlocalVariable proc\n\tpush rbp;\n\tmov rbp,rsp;\n\tsub rsp,16; //堆栈扩展指针 16字节 准备填充局部变量 \n"),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("mov dword ptr [rbp - 8],3; 局部变量a\nmov dword ptr [rbp - 16],4; 局部变量b\n\nmov eax,dword ptr [rbp - 8]; \nmov ebx,dword ptr [rbp - 16];\n\nmov rsp,rbp; 重置指针 删除局部变量 且pop rbp可还原\n\nadd eax,ebx; a+b\n\npop rbp; \n\nret;\n")])])]),s("p",[t._v("localVariable endp")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" \n## LEA\nLEA用来获取间接操作数地址\n与OFFSET 类似 但OFFSET只能获取已知的.DATA 变量地址 \n而LEA 可以真正获取值的内存偏移地址\n\n```c \nlea esi,[ebp + 16]\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);